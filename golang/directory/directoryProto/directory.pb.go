// Code generated by protoc-gen-go. DO NOT EDIT.
// source: directoryProto/directory.proto

package directoryProto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Employee struct {
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int32      `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	Salary               int32      `protobuf:"varint,3,opt,name=salary,proto3" json:"salary,omitempty"`
	Yoe                  int32      `protobuf:"varint,4,opt,name=yoe,proto3" json:"yoe,omitempty"`
	EmployeeID           int32      `protobuf:"varint,5,opt,name=EmployeeID,proto3" json:"EmployeeID,omitempty"`
	Address              []*Address `protobuf:"bytes,6,rep,name=Address,proto3" json:"Address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Employee) Reset()         { *m = Employee{} }
func (m *Employee) String() string { return proto.CompactTextString(m) }
func (*Employee) ProtoMessage()    {}
func (*Employee) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d2807eff6fe62ab, []int{0}
}

func (m *Employee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Employee.Unmarshal(m, b)
}
func (m *Employee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Employee.Marshal(b, m, deterministic)
}
func (m *Employee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Employee.Merge(m, src)
}
func (m *Employee) XXX_Size() int {
	return xxx_messageInfo_Employee.Size(m)
}
func (m *Employee) XXX_DiscardUnknown() {
	xxx_messageInfo_Employee.DiscardUnknown(m)
}

var xxx_messageInfo_Employee proto.InternalMessageInfo

func (m *Employee) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Employee) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Employee) GetSalary() int32 {
	if m != nil {
		return m.Salary
	}
	return 0
}

func (m *Employee) GetYoe() int32 {
	if m != nil {
		return m.Yoe
	}
	return 0
}

func (m *Employee) GetEmployeeID() int32 {
	if m != nil {
		return m.EmployeeID
	}
	return 0
}

func (m *Employee) GetAddress() []*Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type Address struct {
	Area                 string   `protobuf:"bytes,1,opt,name=area,proto3" json:"area,omitempty"`
	City                 string   `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	Zip                  int32    `protobuf:"varint,3,opt,name=zip,proto3" json:"zip,omitempty"`
	EmployeeID           int32    `protobuf:"varint,4,opt,name=employeeID,proto3" json:"employeeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d2807eff6fe62ab, []int{1}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetZip() int32 {
	if m != nil {
		return m.Zip
	}
	return 0
}

func (m *Address) GetEmployeeID() int32 {
	if m != nil {
		return m.EmployeeID
	}
	return 0
}

type ID struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d2807eff6fe62ab, []int{2}
}

func (m *ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ID.Unmarshal(m, b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ID.Marshal(b, m, deterministic)
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return xxx_messageInfo_ID.Size(m)
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Employee)(nil), "directoryProto.Employee")
	proto.RegisterType((*Address)(nil), "directoryProto.Address")
	proto.RegisterType((*ID)(nil), "directoryProto.ID")
}

func init() { proto.RegisterFile("directoryProto/directory.proto", fileDescriptor_9d2807eff6fe62ab) }

var fileDescriptor_9d2807eff6fe62ab = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x9b, 0xf4, 0x8f, 0x76, 0x84, 0xd4, 0x0e, 0xa2, 0x4b, 0x0f, 0xa5, 0xe4, 0xd4, 0x53,
	0x8b, 0xf5, 0xe6, 0xad, 0x35, 0x2a, 0xb9, 0x88, 0x04, 0xbc, 0x78, 0x5b, 0xbb, 0x83, 0x04, 0x5a,
	0x37, 0x6c, 0x17, 0x64, 0xfd, 0x3e, 0x1e, 0xfd, 0x8e, 0xb2, 0xdb, 0x6e, 0x4c, 0x4a, 0xf5, 0xe2,
	0xed, 0xcd, 0x7b, 0x33, 0x2f, 0xbf, 0x84, 0xc0, 0x50, 0xe4, 0x8a, 0x96, 0x5a, 0x2a, 0xf3, 0xa8,
	0xa4, 0x96, 0xd3, 0x72, 0x9c, 0x14, 0x76, 0xc6, 0xa8, 0x9e, 0xc7, 0x5f, 0x01, 0x1c, 0xdf, 0xae,
	0x8b, 0x95, 0x34, 0x44, 0x88, 0xd0, 0x7a, 0xe3, 0x6b, 0x62, 0xc1, 0x28, 0x18, 0x77, 0x33, 0xa7,
	0xf1, 0x14, 0x9a, 0xfc, 0x95, 0x58, 0x38, 0x0a, 0xc6, 0xed, 0xcc, 0x4a, 0x3c, 0x87, 0xce, 0x86,
	0xaf, 0xb8, 0x32, 0xac, 0xe9, 0xcc, 0xdd, 0x64, 0x37, 0x8d, 0x24, 0xd6, 0xda, 0x6e, 0x1a, 0x49,
	0x38, 0x04, 0xf0, 0xdd, 0x69, 0xc2, 0xda, 0x2e, 0xa8, 0x38, 0x78, 0x09, 0x47, 0x73, 0x21, 0x14,
	0x6d, 0x36, 0xac, 0x33, 0x6a, 0x8e, 0x4f, 0x66, 0x17, 0x93, 0x3a, 0xde, 0x64, 0x17, 0x67, 0x7e,
	0x2f, 0x5e, 0x96, 0x27, 0x96, 0x96, 0x2b, 0xe2, 0x9e, 0xd6, 0x6a, 0xeb, 0x2d, 0x73, 0x6d, 0x1c,
	0x6e, 0x37, 0x73, 0xda, 0x72, 0x7d, 0xe4, 0xc5, 0x0e, 0xd6, 0x4a, 0xcb, 0x45, 0x3f, 0x5c, 0x5b,
	0xe0, 0x8a, 0x13, 0x9f, 0x41, 0x98, 0x26, 0x18, 0x41, 0x98, 0x0b, 0xd7, 0xde, 0xce, 0xc2, 0x5c,
	0xcc, 0x3e, 0x43, 0xe8, 0x7b, 0xf8, 0xc4, 0x63, 0x62, 0x0a, 0xfd, 0x1b, 0x45, 0x5c, 0xd3, 0x03,
	0xbd, 0x97, 0x1f, 0x92, 0xed, 0xbf, 0x87, 0x4f, 0x06, 0xbf, 0x26, 0x71, 0x03, 0xef, 0x20, 0x7a,
	0x2a, 0x04, 0xd7, 0xf4, 0xcf, 0x9e, 0x6b, 0x88, 0x12, 0x5a, 0x51, 0xa5, 0x07, 0xf7, 0xb7, 0xd3,
	0x64, 0x70, 0xc0, 0x8b, 0x1b, 0x38, 0x87, 0xde, 0x3d, 0x69, 0x7f, 0xb8, 0x30, 0xa9, 0x38, 0x78,
	0xfc, 0xc7, 0xe3, 0x17, 0xfd, 0xe7, 0xde, 0xb4, 0x9e, 0xbe, 0x74, 0xdc, 0xcf, 0x77, 0xf5, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0x48, 0x38, 0xd0, 0xdf, 0x9e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EmployeeDirectoryClient is the client API for EmployeeDirectory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EmployeeDirectoryClient interface {
	CreateNewEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Employee, error)
	UpdateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Employee, error)
	DeleteEmployee(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ID, error)
	GetEmployeeById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Employee, error)
}

type employeeDirectoryClient struct {
	cc *grpc.ClientConn
}

func NewEmployeeDirectoryClient(cc *grpc.ClientConn) EmployeeDirectoryClient {
	return &employeeDirectoryClient{cc}
}

func (c *employeeDirectoryClient) CreateNewEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/directoryProto.EmployeeDirectory/CreateNewEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeDirectoryClient) UpdateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/directoryProto.EmployeeDirectory/UpdateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeDirectoryClient) DeleteEmployee(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/directoryProto.EmployeeDirectory/DeleteEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeDirectoryClient) GetEmployeeById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/directoryProto.EmployeeDirectory/GetEmployeeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeDirectoryServer is the server API for EmployeeDirectory service.
type EmployeeDirectoryServer interface {
	CreateNewEmployee(context.Context, *Employee) (*Employee, error)
	UpdateEmployee(context.Context, *Employee) (*Employee, error)
	DeleteEmployee(context.Context, *ID) (*ID, error)
	GetEmployeeById(context.Context, *ID) (*Employee, error)
}

// UnimplementedEmployeeDirectoryServer can be embedded to have forward compatible implementations.
type UnimplementedEmployeeDirectoryServer struct {
}

func (*UnimplementedEmployeeDirectoryServer) CreateNewEmployee(ctx context.Context, req *Employee) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewEmployee not implemented")
}
func (*UnimplementedEmployeeDirectoryServer) UpdateEmployee(ctx context.Context, req *Employee) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployee not implemented")
}
func (*UnimplementedEmployeeDirectoryServer) DeleteEmployee(ctx context.Context, req *ID) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployee not implemented")
}
func (*UnimplementedEmployeeDirectoryServer) GetEmployeeById(ctx context.Context, req *ID) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeById not implemented")
}

func RegisterEmployeeDirectoryServer(s *grpc.Server, srv EmployeeDirectoryServer) {
	s.RegisterService(&_EmployeeDirectory_serviceDesc, srv)
}

func _EmployeeDirectory_CreateNewEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDirectoryServer).CreateNewEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directoryProto.EmployeeDirectory/CreateNewEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDirectoryServer).CreateNewEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeDirectory_UpdateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDirectoryServer).UpdateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directoryProto.EmployeeDirectory/UpdateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDirectoryServer).UpdateEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeDirectory_DeleteEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDirectoryServer).DeleteEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directoryProto.EmployeeDirectory/DeleteEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDirectoryServer).DeleteEmployee(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeDirectory_GetEmployeeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDirectoryServer).GetEmployeeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directoryProto.EmployeeDirectory/GetEmployeeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDirectoryServer).GetEmployeeById(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmployeeDirectory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "directoryProto.EmployeeDirectory",
	HandlerType: (*EmployeeDirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewEmployee",
			Handler:    _EmployeeDirectory_CreateNewEmployee_Handler,
		},
		{
			MethodName: "UpdateEmployee",
			Handler:    _EmployeeDirectory_UpdateEmployee_Handler,
		},
		{
			MethodName: "DeleteEmployee",
			Handler:    _EmployeeDirectory_DeleteEmployee_Handler,
		},
		{
			MethodName: "GetEmployeeById",
			Handler:    _EmployeeDirectory_GetEmployeeById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "directoryProto/directory.proto",
}
